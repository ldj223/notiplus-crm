import json
import time
import logging
import os
import pandas as pd
from datetime import datetime
from django.utils import timezone
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from stats.models import AdStats, PlatformCredential
from django.conf import settings
from selenium.webdriver.support.ui import Select

logger = logging.getLogger(__name__)

def save_screenshot(driver, step_name):
    """스크린샷 저장 함수"""
    try:
        # 스크린샷 디렉토리 생성
        screenshot_dir = os.path.join(settings.BASE_DIR, 'screenshots', 'teads')
        os.makedirs(screenshot_dir, exist_ok=True)
        
        # 파일명 생성 (타임스탬프 포함)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{step_name}_{timestamp}.png"
        filepath = os.path.join(screenshot_dir, filename)
        
        # 스크린샷 저장
        driver.save_screenshot(filepath)
        # logger.info(f"[teads] 스크린샷 저장됨: {filepath}")
        
    except Exception as e:
        logger.error(f"[teads] 스크린샷 저장 실패: {str(e)}")

def process_excel_file(file_path, cred):
    """엑셀 파일을 처리하고 데이터를 저장하는 함수"""
    try:
        # CSV 파일 읽기 (한글 인코딩 처리)
        try:
            with open(file_path, 'r', encoding='euc-kr') as f:
                df = pd.read_csv(f)
        except UnicodeDecodeError:
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                df = pd.read_csv(f)
        
        # 데이터 처리
        for _, row in df.iterrows():
            try:
                # 날짜 가져오기
                date = pd.to_datetime(row['Day']).date()

                # content_id 생성
                content_id = str(row['Websites & Apps'])
                
                # ad_unit_id 생성
                ad_unit_id = str(row['Placements'])
                
                # 데이터 업데이트 또는 생성
                AdStats.objects.update_or_create(
                    user=cred.user,
                    platform="teads",
                    alias=cred.alias,
                    date=date,
                    content_id=content_id,
                    ad_unit_id=ad_unit_id,
                    defaults={
                        'content_id': content_id,
                        'ad_unit_name': ad_unit_id,
                        'earnings': float(row['Estimated Earnings in KRW']) if not pd.isna(row['Estimated Earnings in KRW']) else 0,
                        'impressions': int(row['Sold Impressions']) if not pd.isna(row['Sold Impressions']) else 0,
                        'credential': cred
                    }
                )
                
                # logger.info(f"[teads] 데이터 저장 완료: {ad_unit_id} ({date})")
                
            except Exception as e:
                logger.error(f"[teads] 행 {index+2} 처리 중 오류 발생: {str(e)}")
                continue
        
        # 임시 엑셀 파일 삭제
        try:
            os.remove(file_path)
            # logger.info(f"[teads] 임시 엑셀 파일 삭제 완료: {file_path}")
        except Exception as e:
            logger.error(f"[teads] 임시 엑셀 파일 삭제 실패: {str(e)}")
        
        return True
        
    except Exception as e:
        logger.error(f"[teads] 엑셀 파일 처리 중 오류 발생: {str(e)}")
        return False

def login_to_teads(driver, username, password):
    """
    teads에 로그인하는 함수
    """
    try:
        # teads 로그인 페이지로 이동
        driver.get("https://login.teads.tv/login")
        time.sleep(1)  # 페이지 로딩 대기
        # save_screenshot(driver, "1. login_page")
        
        # 로그인 폼이 로드될 때까지 대기
        WebDriverWait(driver, 1).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "[ng-model='ctrl.user.username']"))
        )
        
        # 아이디 입력
        username_field = driver.find_element(By.CSS_SELECTOR, "[ng-model='ctrl.user.username']")
        username_field.clear()
        username_field.send_keys(username)
        # save_screenshot(driver, "2. username_entered")

        # 아이디 입력 및 버튼 클릭 후 비밀번호 입력 화면 대기
        login_button = driver.find_element(By.ID, "login-btn")
        login_button.click()
        time.sleep(2)  # 로그인 처리 대기

        # 비밀번호 입력 로드 대기
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='password']"))
        )
        
        # 비밀번호 입력
        password_field = driver.find_element(By.CSS_SELECTOR, "input[name='password']")
        password_field.clear()
        password_field.send_keys(password)
        # save_screenshot(driver, "3. password_entered")
        
        # 로그인 버튼 클릭
        login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        login_button.click()
        time.sleep(2)  # 로그인 처리 대기
        # save_screenshot(driver, "login_clicked")
        
        # 로그인 성공 확인
        WebDriverWait(driver, 30).until(
            lambda driver: "login.teads.tv/portal" in driver.current_url
        )
        # save_screenshot(driver, "4. login_success")
        
        return True
        
    except Exception as e:
        logger.error(f"Login error: {str(e)}")
        # save_screenshot(driver, "login_error")
        return False

def fetch_teads_stats_by_credential(cred, start_date, end_date):
    """
    teads 통계 데이터를 가져오는 함수
    """
    try:
        # 날짜 문자열을 datetime 객체로 변환
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")
        
        # logger.info(f"[teads] '{cred.alias}' 계정에 대해 {start_date} ~ {end_date} 데이터 수집 시작")
        
        # 자격증명에서 이메일과 비밀번호 가져오기
        credentials = cred.get_credentials()
        email = credentials.get("email")
        password = credentials.get("password")
        
        # Selenium 옵션 설정
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--lang=ko-KR,ko')
        options.add_argument('--disable-gpu')
        options.add_argument('--window-size=1920,1080')
        
        # 다운로드 디렉토리 설정
        download_dir = os.path.join(settings.BASE_DIR, 'temp', 'teads')
        os.makedirs(download_dir, exist_ok=True)
        
        prefs = {
            'intl.accept_languages': 'ko-KR,ko',
            'profile.default_content_setting_values.images': 2,
            'profile.managed_default_content_settings.images': 2,
            'download.default_directory': download_dir,
            'download.prompt_for_download': False,
            'download.directory_upgrade': True,
            'safebrowsing.enabled': False
        }
        options.add_experimental_option('prefs', prefs)
        
        # ChromeDriver 서비스 설정
        service = webdriver.ChromeService(executable_path='/usr/local/bin/chromedriver')
        driver = webdriver.Chrome(service=service, options=options)
        
        try:
            # 로그인 시도
            if not login_to_teads(driver, email, password):
                logger.error(f"[teads] '{cred.alias}' 계정 로그인 실패")
                return None
                
            # logger.info(f"[teads] '{cred.alias}' 계정 로그인 성공")

            # 리포트 페이지로 이동
            report_url = f"https://publishers.teads.tv/report/finance"
            driver.get(report_url)
            time.sleep(0.5)  # 페이지 로딩 대기
            # save_screenshot(driver, "report_page")
            
            # 체크박스들 체크
            checkboxes = [
                "finance-report-metric-checkbox-metricTotalEarnings",
                "finance-report-metric-checkbox-metricSoldImpressions",
                "finance-report-dimension-checkbox-dimensionDateAndTime",
                "finance-report-dimension-checkbox-dimensionWebsite",
                "finance-report-dimension-checkbox-dimensionPlacement"
            ]
            
            for checkbox_id in checkboxes:
                try:
                    checkbox = WebDriverWait(driver, 2).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, f"[data-e2e='{checkbox_id}']"))
                    )
                    if not checkbox.is_selected():
                        checkbox.click()
                        time.sleep(0.5)  # 체크박스 상태 변경 대기
                except Exception as e:
                    logger.warning(f"[teads] 체크박스 '{checkbox_id}' 체크 실패: {str(e)}")
            
            # save_screenshot(driver, "report_page")
            
            # 엑셀 다운로드 버튼 클릭
            excel_button = WebDriverWait(driver, 1).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "[data-e2e='finance-report-csv-download-button']"))
            )
            excel_button.click()
            
            # 파일 다운로드 대기 (최대 30초)
            max_wait = 30
            wait_interval = 1
            total_wait = 0
            
            while total_wait < max_wait:
                downloaded_files = os.listdir(download_dir)
                if downloaded_files:
                    latest_file = max(
                        [os.path.join(download_dir, f) for f in downloaded_files],
                        key=os.path.getctime
                    )
                    # 파일이 완전히 다운로드될 때까지 추가 대기
                    time.sleep(2)
                    if os.path.getsize(latest_file) > 0:
                        logger.info(f"[teads] 엑셀 파일 다운로드 완료: {latest_file}")
                        break
                time.sleep(wait_interval)
                total_wait += wait_interval
                # logger.info(f"[teads] 파일 다운로드 대기 중... ({total_wait}초)")
            
            if not downloaded_files:
                raise Exception("파일 다운로드 실패")
            
            if os.path.getsize(latest_file) == 0:
                raise Exception("다운로드된 파일이 비어있음")
            
            # 엑셀 파일 처리
            if process_excel_file(latest_file, cred):
                logger.info(f"[teads] 엑셀 데이터 처리 완료")
            else:
                logger.error(f"[teads] 엑셀 데이터 처리 실패")
            
            logger.info(f"[teads] '{cred.alias}' 계정 데이터 수집 완료")
            cred.last_fetched_at = timezone.now()
            cred.save()
            return True
            
        finally:            
            driver.quit()
            
    except Exception as e:
        logger.error(f"[teads] '{cred.alias}' 계정 데이터 수집 중 오류 발생: {str(e)}")
        return None 